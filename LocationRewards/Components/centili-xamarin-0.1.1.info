{"Name":"In-App Payment","Id":561,"Alias":"centili-xamarin","Description":"# Centili in-app Payment component details\n\n\nThis package is the Xamarin component which can be merged with your existing Xamarin project and enable you to use the Centili Mobile Payments system. This is the product of Infobip Ltd. For any issues and questions you might occur, please contact us at support@centili.com.","Version":"0.1.1","Summary":"Centili in-app Payment component for Xamarin.","QuickStart":"# Getting Started with Centili Mobile Payments Library\nThis is Centili Mobile Payments component for Xamarin ([Xamarin](http://xamarin.com \"Xamarin\")) which can be merged with your Xamarin project to enable you to use Centili Mobile Payments system.\n\n## Step By Step integration\n1. Download our component from component marketplace and reference dll from _libs_ folder in your project (_Infobip.Mpayments.dll_).\n2. In your code make new _PurchaseRequest_ object (with _ApiKey_ as only mandatory field).\r\n \r\n\t\tPurchaseRequest request = new Infobip.Mpayments.PurchaseRequest (\"your-api-key-abc123abc123\") {\r\n\t\t\tClientId = \"test1\"\r\n\t\t};\r\n\r\n3. Register your callbacks (_PurchaseListener_) by ``` PurchaseManager.AttachPurchaseListener(new MyPurchaseListener()); ``` where _MyPurchaseListener_ extends _Java.Lang.Object_ [[?](http://docs.xamarin.com/guides/android/advanced_topics/java_integration_overview/android_callable_wrappers/index.html#1.implementing-interfaces \"Why must I extend Java.Lang.Object\")] and implements interface _Infobip.Mpayments.IPurchaseListener_. It should have these methods:\r\n\r\n    \tpublic void OnPurchaseCanceled (PurchaseResponse purchaseResponse)\r\n    \t{\r\n    \t\t// Your code goes here...\r\n    \t}\r\n    \tpublic void OnPurchaseFailed (PurchaseResponse purchaseResponse)\r\n    \t{\r\n    \t\t// Your code goes here...\r\n    \t}\r\n    \tpublic void OnPurchasePending (PurchaseResponse purchaseResponse)\r\n    \t{\r\n    \t\t// Your code goes here...\r\n    \t}\r\n    \tpublic void OnPurchaseSuccess (PurchaseResponse purchaseResponse)\r\n    \t{\r\n    \t\t// Your code goes here...\r\n    \t}\r\n \r\n4. Call static method _PurchaseManager.StartPurchase(purchaseRequest, context)_.\r\n\r\n    \tPurchaseManager.StartPurchase(purchaseRequest, applicationContext);\r\n\r\n5. Your callback methods will be invoked upon completing payment request. All you have to do is handle payment result in your application (additional info is provided by _PurchaseResponse_).\n\n\t\tpublic void OnPurchaseSuccess (PurchaseResponse purchaseResponse)\n    \t{\n    \t\t// Your code goes here...\n\t\t\t// ex: \n\t\t\tthis.Users.FindById(purchaseResponse.ClientId).AddCredit(purchaseResponse.ItemAmount);\n    \t}\n\r\n## Additional methods\r\n\r\n- You can set *Infobip.Mpayments.Util.Logger*.*SetDebugModeEnabled(debugMode)* to true or false to get our logger output debug data. Defaults to false.\r\n- You can also set or unset *PurchaseManager*.*PendingTransactionHandlingEnabled*, which will influence whether will we continue pending payment when new payment request is sent, or will we start a new payment request. Default is true, which means that we will try to resume unresolved transaction.\r\n\r\n## Authors\r\nFramework Integration Team @ Infobip Belgrade, Serbia\nCopyright 2013-2014 Infobip Ltd. \r\n","Hash":"72ca34e8b6d19c9c7dda3f4f0f74e418","TargetPlatforms":["android"],"TrialHash":null}